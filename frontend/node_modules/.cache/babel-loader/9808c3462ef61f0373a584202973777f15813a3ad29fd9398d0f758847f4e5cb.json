{"ast":null,"code":"import bcrypt from 'bcrypt';\nimport db from './db'; // Ensure this is the correct path\n\nconst saltRounds = 10;\nconst recentPasswordLimit = 3; // Number of recent passwords to check\n\nconst dictionaryWords = ['password', '123456', 'qwerty']; // Example dictionary words\n\nexport async function isPasswordValid(password) {\n  // Check for minimum length\n  if (password.length < 8) {\n    return {\n      isValid: false,\n      message: \"Password must be at least 8 characters long\"\n    };\n  }\n\n  // Check for uppercase, lowercase, numbers, and special characters\n  if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/[0-9]/.test(password) || !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n    return {\n      isValid: false,\n      message: \"Password must include uppercase letters, lowercase letters, numbers, and special characters\"\n    };\n  }\n\n  // Check for dictionary words\n  if (dictionaryWords.some(word => password.toLowerCase().includes(word))) {\n    return {\n      isValid: false,\n      message: \"Password should not contain common dictionary words\"\n    };\n  }\n\n  //   // Check password history\n  //   const recentPasswords = await getRecentPasswords();\n  //   if (recentPasswords.includes(password)) {\n  //     return { isValid: false, message: \"Password has been used recently\" };\n  //   }\n\n  return {\n    isValid: true\n  };\n}\n\n// Function to get recent passwords from the database\nexport async function getRecentPasswords() {\n  const [rows] = await db.query(\"SELECT password FROM password_history ORDER BY timestamp DESC LIMIT ?\", [recentPasswordLimit]);\n  return rows.map(row => row.password);\n}\n\n// Function to add password to history\nexport async function addPasswordToHistory(userId, password) {\n  const hashedPassword = await bcrypt.hash(password, saltRounds);\n  await db.query(\"INSERT INTO password_history (user_id, password, timestamp) VALUES (?, ?, ?)\", [userId, hashedPassword, new Date()]);\n}","map":{"version":3,"names":["bcrypt","db","saltRounds","recentPasswordLimit","dictionaryWords","isPasswordValid","password","length","isValid","message","test","some","word","toLowerCase","includes","getRecentPasswords","rows","query","map","row","addPasswordToHistory","userId","hashedPassword","hash","Date"],"sources":["C:/Users/vales/OneDrive/שולחן העבודה/לימודים/שנה ג/סמס ק/אבטחת מחשבים/‏‏compsecprojectcopy/frontend/src/passwordValidation.js"],"sourcesContent":["\r\nimport bcrypt from 'bcrypt';\r\nimport db from './db'; // Ensure this is the correct path\r\n\r\nconst saltRounds = 10;\r\nconst recentPasswordLimit = 3; // Number of recent passwords to check\r\n\r\nconst dictionaryWords = ['password', '123456', 'qwerty']; // Example dictionary words\r\n\r\nexport async function isPasswordValid(password) {\r\n  // Check for minimum length\r\n  if (password.length < 8) {\r\n    return { isValid: false, message: \"Password must be at least 8 characters long\" };\r\n  }\r\n\r\n  // Check for uppercase, lowercase, numbers, and special characters\r\n  if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/[0-9]/.test(password) || !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\r\n    return { isValid: false, message: \"Password must include uppercase letters, lowercase letters, numbers, and special characters\" };\r\n  }\r\n\r\n  // Check for dictionary words\r\n  if (dictionaryWords.some(word => password.toLowerCase().includes(word))) {\r\n    return { isValid: false, message: \"Password should not contain common dictionary words\" };\r\n  }\r\n\r\n//   // Check password history\r\n//   const recentPasswords = await getRecentPasswords();\r\n//   if (recentPasswords.includes(password)) {\r\n//     return { isValid: false, message: \"Password has been used recently\" };\r\n//   }\r\n\r\n  return { isValid: true };\r\n}\r\n\r\n// Function to get recent passwords from the database\r\nexport async function getRecentPasswords() {\r\n  const [rows] = await db.query(\"SELECT password FROM password_history ORDER BY timestamp DESC LIMIT ?\", [recentPasswordLimit]);\r\n  return rows.map(row => row.password);\r\n}\r\n\r\n// Function to add password to history\r\nexport async function addPasswordToHistory(userId, password) {\r\n  const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n  await db.query(\"INSERT INTO password_history (user_id, password, timestamp) VALUES (?, ?, ?)\", [userId, hashedPassword, new Date()]);\r\n}\r\n"],"mappings":"AACA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,OAAOC,EAAE,MAAM,MAAM,CAAC,CAAC;;AAEvB,MAAMC,UAAU,GAAG,EAAE;AACrB,MAAMC,mBAAmB,GAAG,CAAC,CAAC,CAAC;;AAE/B,MAAMC,eAAe,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;;AAE1D,OAAO,eAAeC,eAAeA,CAACC,QAAQ,EAAE;EAC9C;EACA,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IACvB,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAA8C,CAAC;EACnF;;EAEA;EACA,IAAI,CAAC,OAAO,CAACC,IAAI,CAACJ,QAAQ,CAAC,IAAI,CAAC,OAAO,CAACI,IAAI,CAACJ,QAAQ,CAAC,IAAI,CAAC,OAAO,CAACI,IAAI,CAACJ,QAAQ,CAAC,IAAI,CAAC,wBAAwB,CAACI,IAAI,CAACJ,QAAQ,CAAC,EAAE;IAC7H,OAAO;MAAEE,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAA8F,CAAC;EACnI;;EAEA;EACA,IAAIL,eAAe,CAACO,IAAI,CAACC,IAAI,IAAIN,QAAQ,CAACO,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,IAAI,CAAC,CAAC,EAAE;IACvE,OAAO;MAAEJ,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAsD,CAAC;EAC3F;;EAEF;EACA;EACA;EACA;EACA;;EAEE,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC1B;;AAEA;AACA,OAAO,eAAeO,kBAAkBA,CAAA,EAAG;EACzC,MAAM,CAACC,IAAI,CAAC,GAAG,MAAMf,EAAE,CAACgB,KAAK,CAAC,uEAAuE,EAAE,CAACd,mBAAmB,CAAC,CAAC;EAC7H,OAAOa,IAAI,CAACE,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACb,QAAQ,CAAC;AACtC;;AAEA;AACA,OAAO,eAAec,oBAAoBA,CAACC,MAAM,EAAEf,QAAQ,EAAE;EAC3D,MAAMgB,cAAc,GAAG,MAAMtB,MAAM,CAACuB,IAAI,CAACjB,QAAQ,EAAEJ,UAAU,CAAC;EAC9D,MAAMD,EAAE,CAACgB,KAAK,CAAC,8EAA8E,EAAE,CAACI,MAAM,EAAEC,cAAc,EAAE,IAAIE,IAAI,CAAC,CAAC,CAAC,CAAC;AACtI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}