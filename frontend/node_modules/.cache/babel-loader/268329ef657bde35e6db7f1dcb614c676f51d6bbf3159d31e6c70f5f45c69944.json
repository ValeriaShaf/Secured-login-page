{"ast":null,"code":"\n// import bcrypt from 'bcrypt';\n// import db from './backend/server.js'; // Ensure this is the correct path\n\n// const saltRounds = 10;\n// const recentPasswordLimit = 3; // Number of recent passwords to check\n\n// const dictionaryWords = ['password', '123456', 'qwerty']; // Example dictionary words\n\n// export async function isPasswordValid(password) {\n//   // Check for minimum length\n//   if (password.length < 8) {\n//     return { isValid: false, message: \"Password must be at least 8 characters long\" };\n//   }\n\n//   // Check for uppercase, lowercase, numbers, and special characters\n//   if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/[0-9]/.test(password) || !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n//     return { isValid: false, message: \"Password must include uppercase letters, lowercase letters, numbers, and special characters\" };\n//   }\n\n//   // Check for dictionary words\n//   if (dictionaryWords.some(word => password.toLowerCase().includes(word))) {\n//     return { isValid: false, message: \"Password should not contain common dictionary words\" };\n//   }\n\n//   // Check password history\n//   const recentPasswords = await getRecentPasswords();\n//   if (recentPasswords.includes(password)) {\n//     return { isValid: false, message: \"Password has been used recently\" };\n//   }\n\n//   return { isValid: true };\n// }\n\n// // Function to get recent passwords from the database\n// export async function getRecentPasswords() {\n//   const [rows] = await db.query(\"SELECT password FROM password_history ORDER BY timestamp DESC LIMIT ?\", [recentPasswordLimit]);\n//   return rows.map(row => row.password);\n// }\n\n// // Function to add password to history\n// export async function addPasswordToHistory(userId, password) {\n//   const hashedPassword = await bcrypt.hash(password, saltRounds);\n//   await db.query(\"INSERT INTO password_history (user_id, password, timestamp) VALUES (?, ?, ?)\", [userId, hashedPassword, new Date()]);\n// }","map":{"version":3,"names":[],"sources":["C:/Users/vales/OneDrive/שולחן העבודה/לימודים/שנה ג/סמס ק/אבטחת מחשבים/‏‏compsecprojectcopy/frontend/src/passwordValidation.js"],"sourcesContent":["\r\n// import bcrypt from 'bcrypt';\r\n// import db from './backend/server.js'; // Ensure this is the correct path\r\n\r\n// const saltRounds = 10;\r\n// const recentPasswordLimit = 3; // Number of recent passwords to check\r\n\r\n// const dictionaryWords = ['password', '123456', 'qwerty']; // Example dictionary words\r\n\r\n// export async function isPasswordValid(password) {\r\n//   // Check for minimum length\r\n//   if (password.length < 8) {\r\n//     return { isValid: false, message: \"Password must be at least 8 characters long\" };\r\n//   }\r\n\r\n//   // Check for uppercase, lowercase, numbers, and special characters\r\n//   if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/[0-9]/.test(password) || !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\r\n//     return { isValid: false, message: \"Password must include uppercase letters, lowercase letters, numbers, and special characters\" };\r\n//   }\r\n\r\n//   // Check for dictionary words\r\n//   if (dictionaryWords.some(word => password.toLowerCase().includes(word))) {\r\n//     return { isValid: false, message: \"Password should not contain common dictionary words\" };\r\n//   }\r\n\r\n//   // Check password history\r\n//   const recentPasswords = await getRecentPasswords();\r\n//   if (recentPasswords.includes(password)) {\r\n//     return { isValid: false, message: \"Password has been used recently\" };\r\n//   }\r\n\r\n//   return { isValid: true };\r\n// }\r\n\r\n// // Function to get recent passwords from the database\r\n// export async function getRecentPasswords() {\r\n//   const [rows] = await db.query(\"SELECT password FROM password_history ORDER BY timestamp DESC LIMIT ?\", [recentPasswordLimit]);\r\n//   return rows.map(row => row.password);\r\n// }\r\n\r\n// // Function to add password to history\r\n// export async function addPasswordToHistory(userId, password) {\r\n//   const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n//   await db.query(\"INSERT INTO password_history (user_id, password, timestamp) VALUES (?, ?, ?)\", [userId, hashedPassword, new Date()]);\r\n// }\r\n"],"mappings":";AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}