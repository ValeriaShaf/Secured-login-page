{"ast":null,"code":"// backend/passwordValidation.js\nconst bcrypt = require('bcrypt');\nconst db = require('./server'); // Adjust path as necessary\n\nconst saltRounds = 10;\nconst recentPasswordLimit = 3; // Number of recent passwords to check\nconst dictionaryWords = ['password', '123456', 'qwerty']; // Example dictionary words\n\nasync function isPasswordValid(password) {\n  // Check for minimum length\n  if (password.length < 8) {\n    return {\n      isValid: false,\n      message: \"Password must be at least 8 characters long\"\n    };\n  }\n\n  // Check for uppercase, lowercase, numbers, and special characters\n  if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/[0-9]/.test(password) || !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\n    return {\n      isValid: false,\n      message: \"Password must include uppercase letters, lowercase letters, numbers, and special characters\"\n    };\n  }\n\n  // Check for dictionary words\n  if (dictionaryWords.some(word => password.toLowerCase().includes(word))) {\n    return {\n      isValid: false,\n      message: \"Password should not contain common dictionary words\"\n    };\n  }\n\n  // Check password history\n  const recentPasswords = await getRecentPasswords();\n  if (recentPasswords.includes(password)) {\n    return {\n      isValid: false,\n      message: \"Password has been used recently\"\n    };\n  }\n  return {\n    isValid: true\n  };\n}\nasync function getRecentPasswords() {\n  const [rows] = await db.query(\"SELECT password FROM password_history ORDER BY timestamp DESC LIMIT ?\", [recentPasswordLimit]);\n  return rows.map(row => row.password);\n}\nasync function addPasswordToHistory(userId, password) {\n  const hashedPassword = await bcrypt.hash(password, saltRounds);\n  await db.query(\"INSERT INTO password_history (user_id, password, timestamp) VALUES (?, ?, ?)\", [userId, hashedPassword, new Date()]);\n}\nmodule.exports = {\n  isPasswordValid,\n  addPasswordToHistory\n};","map":{"version":3,"names":["bcrypt","require","db","saltRounds","recentPasswordLimit","dictionaryWords","isPasswordValid","password","length","isValid","message","test","some","word","toLowerCase","includes","recentPasswords","getRecentPasswords","rows","query","map","row","addPasswordToHistory","userId","hashedPassword","hash","Date","module","exports"],"sources":["C:/Users/vales/OneDrive/שולחן העבודה/לימודים/שנה ג/סמס ק/אבטחת מחשבים/‏‏compsecprojectcopy/frontend/src/passwordValidation.js"],"sourcesContent":["// backend/passwordValidation.js\r\nconst bcrypt = require('bcrypt');\r\nconst db = require('./server'); // Adjust path as necessary\r\n\r\nconst saltRounds = 10;\r\nconst recentPasswordLimit = 3; // Number of recent passwords to check\r\nconst dictionaryWords = ['password', '123456', 'qwerty']; // Example dictionary words\r\n\r\nasync function isPasswordValid(password) {\r\n    // Check for minimum length\r\n    if (password.length < 8) {\r\n        return { isValid: false, message: \"Password must be at least 8 characters long\" };\r\n    }\r\n\r\n    // Check for uppercase, lowercase, numbers, and special characters\r\n    if (!/[A-Z]/.test(password) || !/[a-z]/.test(password) || !/[0-9]/.test(password) || !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) {\r\n        return { isValid: false, message: \"Password must include uppercase letters, lowercase letters, numbers, and special characters\" };\r\n    }\r\n\r\n    // Check for dictionary words\r\n    if (dictionaryWords.some(word => password.toLowerCase().includes(word))) {\r\n        return { isValid: false, message: \"Password should not contain common dictionary words\" };\r\n    }\r\n\r\n    // Check password history\r\n    const recentPasswords = await getRecentPasswords();\r\n    if (recentPasswords.includes(password)) {\r\n        return { isValid: false, message: \"Password has been used recently\" };\r\n    }\r\n\r\n    return { isValid: true };\r\n}\r\n\r\nasync function getRecentPasswords() {\r\n    const [rows] = await db.query(\"SELECT password FROM password_history ORDER BY timestamp DESC LIMIT ?\", [recentPasswordLimit]);\r\n    return rows.map(row => row.password);\r\n}\r\n\r\nasync function addPasswordToHistory(userId, password) {\r\n    const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n    await db.query(\"INSERT INTO password_history (user_id, password, timestamp) VALUES (?, ?, ?)\", [userId, hashedPassword, new Date()]);\r\n}\r\n\r\nmodule.exports = { isPasswordValid, addPasswordToHistory };\r\n"],"mappings":"AAAA;AACA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,EAAE,GAAGD,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;;AAEhC,MAAME,UAAU,GAAG,EAAE;AACrB,MAAMC,mBAAmB,GAAG,CAAC,CAAC,CAAC;AAC/B,MAAMC,eAAe,GAAG,CAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;;AAE1D,eAAeC,eAAeA,CAACC,QAAQ,EAAE;EACrC;EACA,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;IACrB,OAAO;MAAEC,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAA8C,CAAC;EACrF;;EAEA;EACA,IAAI,CAAC,OAAO,CAACC,IAAI,CAACJ,QAAQ,CAAC,IAAI,CAAC,OAAO,CAACI,IAAI,CAACJ,QAAQ,CAAC,IAAI,CAAC,OAAO,CAACI,IAAI,CAACJ,QAAQ,CAAC,IAAI,CAAC,wBAAwB,CAACI,IAAI,CAACJ,QAAQ,CAAC,EAAE;IAC3H,OAAO;MAAEE,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAA8F,CAAC;EACrI;;EAEA;EACA,IAAIL,eAAe,CAACO,IAAI,CAACC,IAAI,IAAIN,QAAQ,CAACO,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,IAAI,CAAC,CAAC,EAAE;IACrE,OAAO;MAAEJ,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAsD,CAAC;EAC7F;;EAEA;EACA,MAAMM,eAAe,GAAG,MAAMC,kBAAkB,CAAC,CAAC;EAClD,IAAID,eAAe,CAACD,QAAQ,CAACR,QAAQ,CAAC,EAAE;IACpC,OAAO;MAAEE,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAAkC,CAAC;EACzE;EAEA,OAAO;IAAED,OAAO,EAAE;EAAK,CAAC;AAC5B;AAEA,eAAeQ,kBAAkBA,CAAA,EAAG;EAChC,MAAM,CAACC,IAAI,CAAC,GAAG,MAAMhB,EAAE,CAACiB,KAAK,CAAC,uEAAuE,EAAE,CAACf,mBAAmB,CAAC,CAAC;EAC7H,OAAOc,IAAI,CAACE,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACd,QAAQ,CAAC;AACxC;AAEA,eAAee,oBAAoBA,CAACC,MAAM,EAAEhB,QAAQ,EAAE;EAClD,MAAMiB,cAAc,GAAG,MAAMxB,MAAM,CAACyB,IAAI,CAAClB,QAAQ,EAAEJ,UAAU,CAAC;EAC9D,MAAMD,EAAE,CAACiB,KAAK,CAAC,8EAA8E,EAAE,CAACI,MAAM,EAAEC,cAAc,EAAE,IAAIE,IAAI,CAAC,CAAC,CAAC,CAAC;AACxI;AAEAC,MAAM,CAACC,OAAO,GAAG;EAAEtB,eAAe;EAAEgB;AAAqB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}